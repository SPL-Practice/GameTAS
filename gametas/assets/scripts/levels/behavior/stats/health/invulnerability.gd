extends "res://assets/scripts/levels/behavior/stats/health/vulnerability.gd"

signal spare_time_increased(time)
signal spare_invulnerability(current)

onready var spare = $invulnerability
onready var sanity = $sanity

const max_spare_time = 50

export (int) var spare_time = 10
export (int) var spare_drop = 1

var current_spare = spare_time

func boost_spare_time(bonus):
	spare_time = min(spare_time + bonus, max_spare_time)
	emit_signal("spare_time_increased", spare_time)
	
func boost_sanity_time(bonus):
	sanity.wait_time = 1.0 + bonus * 0.5
	
func boost_drop(bonus):
	drop = max(drop + bonus, 0);

var constant = 0
var drop = 1

func _on_invulnerability_timeout():
	emit_signal("spare_invulnerability", current_spare)
	if current_spare > 0:
		current_spare -= spare_drop
		return
		
	spare.stop()
	current_spare = spare_time
	if constant > 0 and value > 0:
		damage(constant)

func _on_sanity_timeout():
	if value > 0:
		sap(drop)
		sanity.start()

func damage(amount):
	if spare.is_stopped():
		spare.start()
		.damage(amount)

func release_damage(amount):
	constant -= amount

func hold_damage(amount):
	constant += amount
	damage(amount)
